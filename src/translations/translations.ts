import type { Translations } from './index';
import { fr } from './fr';
import { en } from './en';
import { de } from './de';
import { it } from './it';

// Log des traductions chargÃ©es au dÃ©marrage de l'application
console.log('[translations.ts] Loading translations...');
console.log('[translations.ts] Available languages:', Object.keys({ fr, en, de, it }));

// VÃ©rification que toutes les traductions sont correctement importÃ©es
const allTranslations = { fr, en, de, it };
Object.entries(allTranslations).forEach(([lang, translations]) => {
  console.log(`[translations.ts] ${lang} translations loaded:`, {
    hasVersionLocalInfo: 'versionLocalInfo' in translations,
    hasVersionCloudInfo: 'versionCloudInfo' in translations,
    versionLocalInfo: translations.versionLocalInfo,
    versionCloudInfo: translations.versionCloudInfo,
  });
});

// Export de toutes les traductions
export const translations: Record<string, Translations> = {
  fr,
  en,
  de,
  it,
};

// Export des types et traductions individuelles
export type { Translations } from './index';
export { fr } from './fr';
export { en } from './en';
export { de } from './de';
export { it } from './it';

/**
 * Fonction utilitaire pour obtenir les traductions avec vÃ©rification
 * @param language - Code de la langue (fr, en, de, it)
 * @returns Traductions pour la langue spÃ©cifiÃ©e ou franÃ§ais par dÃ©faut
 */
export const getTranslations = (language: string): Translations => {
  console.log(`[translations.ts] getTranslations called for language: ${language}`);
  
  if (!translations[language]) {
    console.warn(`[translations.ts] Language "${language}" not found, falling back to French`);
    return translations.fr;
  }
  
  const result = translations[language];
  console.log(`[translations.ts] Returning translations for ${language}:`, {
    versionLocalInfo: result.versionLocalInfo,
    versionCloudInfo: result.versionCloudInfo,
  });
  
  return result;
};

/**
 * Fonction utilitaire pour vÃ©rifier si une langue est supportÃ©e
 * @param language - Code de la langue Ã  vÃ©rifier
 * @returns true si la langue est supportÃ©e, false sinon
 */
export const isLanguageSupported = (language: string): boolean => {
  const supported = Object.keys(translations).includes(language);
  console.log(`[translations.ts] isLanguageSupported(${language}): ${supported}`);
  return supported;
};

// Liste des langues supportÃ©es
export const supportedLanguages = [
  { code: 'fr', name: 'FranÃ§ais', flag: 'ðŸ‡«ðŸ‡·' },
  { code: 'en', name: 'English', flag: 'ðŸ‡¬ðŸ‡§' },
  { code: 'de', name: 'Deutsch', flag: 'ðŸ‡©ðŸ‡ª' },
  { code: 'it', name: 'Italiano', flag: 'ðŸ‡®ðŸ‡¹' },
];

/**
 * Fonction utilitaire pour obtenir le nom de la langue
 * @param code - Code de la langue
 * @returns Nom de la langue ou 'FranÃ§ais' par dÃ©faut
 */
export const getLanguageName = (code: string): string => {
  const language = supportedLanguages.find(lang => lang.code === code);
  return language ? language.name : 'FranÃ§ais';
};

/**
 * Fonction utilitaire pour obtenir le drapeau de la langue
 * @param code - Code de la langue
 * @returns Drapeau de la langue ou ðŸ‡«ðŸ‡· par dÃ©faut
 */
export const getLanguageFlag = (code: string): string => {
  const language = supportedLanguages.find(lang => lang.code === code);
  return language ? language.flag : 'ðŸ‡«ðŸ‡·';
};
