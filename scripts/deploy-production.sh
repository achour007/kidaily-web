#!/bin/bash

# Script de d√©ploiement en production pour Kidaily
# Usage: ./scripts/deploy-production.sh [platform]

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
APP_NAME="Kidaily"
VERSION=$(node -p "require('./package.json').version")
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
DEPLOY_LOG="deploy-${TIMESTAMP}.log"

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$DEPLOY_LOG"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}" | tee -a "$DEPLOY_LOG"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}" | tee -a "$DEPLOY_LOG"
}

error() {
    echo -e "${RED}‚ùå $1${NC}" | tee -a "$DEPLOY_LOG"
    exit 1
}

# V√©rifications pr√©-d√©ploiement
check_prerequisites() {
    log "üîç V√©rification des pr√©requis..."
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        error "Node.js n'est pas install√©"
    fi
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        error "npm n'est pas install√©"
    fi
    
    # V√©rifier Git
    if ! command -v git &> /dev/null; then
        error "Git n'est pas install√©"
    fi
    
    # V√©rifier que nous sommes sur la branche main
    CURRENT_BRANCH=$(git branch --show-current)
    if [ "$CURRENT_BRANCH" != "main" ]; then
        warning "Vous n'√™tes pas sur la branche main (actuellement sur: $CURRENT_BRANCH)"
        read -p "Continuer quand m√™me ? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            error "D√©ploiement annul√©"
        fi
    fi
    
    success "Pr√©requis v√©rifi√©s"
}

# Tests de qualit√©
run_tests() {
    log "üß™ Ex√©cution des tests..."
    
    # Tests unitaires
    log "  - Tests unitaires..."
    npm run test:coverage || error "Tests unitaires √©chou√©s"
    
    # Tests E2E
    log "  - Tests E2E..."
    npm run test:e2e:headless || error "Tests E2E √©chou√©s"
    
    # Build de production
    log "  - Build de production..."
    npm run build:prod || error "Build de production √©chou√©"
    
    success "Tous les tests passent"
}

# Analyse de performance
analyze_performance() {
    log "üìä Analyse de performance..."
    
    # V√©rifier la taille du bundle
    BUNDLE_SIZE=$(du -sh build/static/js/ | cut -f1)
    log "  - Taille du bundle: $BUNDLE_SIZE"
    
    # V√©rifier la compression
    if command -v gzip &> /dev/null; then
        COMPRESSED_SIZE=$(gzip -c build/static/js/main.*.js | wc -c)
        ORIGINAL_SIZE=$(wc -c < build/static/js/main.*.js)
        COMPRESSION_RATIO=$((100 - (COMPRESSED_SIZE * 100 / ORIGINAL_SIZE)))
        log "  - Ratio de compression: ${COMPRESSION_RATIO}%"
    fi
    
    success "Analyse de performance termin√©e"
}

# D√©ploiement sur Vercel
deploy_vercel() {
    log "üöÄ D√©ploiement sur Vercel..."
    
    if ! command -v vercel &> /dev/null; then
        error "Vercel CLI n'est pas install√©. Installez-le avec: npm i -g vercel"
    fi
    
    vercel --prod --yes || error "D√©ploiement Vercel √©chou√©"
    success "D√©ploiement Vercel r√©ussi"
}

# D√©ploiement sur Netlify
deploy_netlify() {
    log "üöÄ D√©ploiement sur Netlify..."
    
    if ! command -v netlify &> /dev/null; then
        error "Netlify CLI n'est pas install√©. Installez-le avec: npm i -g netlify-cli"
    fi
    
    netlify deploy --prod --dir=build || error "D√©ploiement Netlify √©chou√©"
    success "D√©ploiement Netlify r√©ussi"
}

# D√©ploiement sur GitHub Pages
deploy_github() {
    log "üöÄ D√©ploiement sur GitHub Pages..."
    
    if ! command -v gh-pages &> /dev/null; then
        log "Installation de gh-pages..."
        npm install --save-dev gh-pages
    fi
    
    npm run deploy:github || error "D√©ploiement GitHub Pages √©chou√©"
    success "D√©ploiement GitHub Pages r√©ussi"
}

# D√©ploiement Docker
deploy_docker() {
    log "üê≥ D√©ploiement Docker..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker n'est pas install√©"
    fi
    
    # Construire l'image
    docker build -f Dockerfile.prod -t kidaily-web:latest . || error "Build Docker √©chou√©"
    
    # Arr√™ter l'ancien conteneur
    docker stop kidaily-web 2>/dev/null || true
    docker rm kidaily-web 2>/dev/null || true
    
    # D√©marrer le nouveau conteneur
    docker run -d --name kidaily-web -p 80:80 kidaily-web:latest || error "D√©marrage Docker √©chou√©"
    
    success "D√©ploiement Docker r√©ussi"
}

# V√©rifications post-d√©ploiement
post_deploy_checks() {
    log "üîç V√©rifications post-d√©ploiement..."
    
    # Attendre que l'application soit pr√™te
    sleep 10
    
    # V√©rifier la sant√© de l'application
    if command -v curl &> /dev/null; then
        if curl -f http://localhost/health &>/dev/null; then
            success "Application accessible et en bonne sant√©"
        else
            warning "Application accessible mais health check √©chou√©"
        fi
    fi
    
    success "V√©rifications post-d√©ploiement termin√©es"
}

# Notification
notify_team() {
    log "üì¢ Notification de l'√©quipe..."
    
    # Ici vous pouvez ajouter des notifications Slack, email, etc.
    echo "üéâ D√©ploiement de $APP_NAME v$VERSION termin√© avec succ√®s !" | tee -a "$DEPLOY_LOG"
    
    success "√âquipe notifi√©e"
}

# Fonction principale
main() {
    log "üöÄ D√©marrage du d√©ploiement de $APP_NAME v$VERSION"
    
    # V√©rifications pr√©alables
    check_prerequisites
    
    # Tests de qualit√©
    run_tests
    
    # Analyse de performance
    analyze_performance
    
    # D√©ploiement selon la plateforme
    PLATFORM=${1:-vercel}
    case $PLATFORM in
        "vercel")
            deploy_vercel
            ;;
        "netlify")
            deploy_netlify
            ;;
        "github")
            deploy_github
            ;;
        "docker")
            deploy_docker
            ;;
        *)
            error "Plateforme non reconnue: $PLATFORM. Utilisez: vercel, netlify, github, ou docker"
            ;;
    esac
    
    # V√©rifications post-d√©ploiement
    post_deploy_checks
    
    # Notification
    notify_team
    
    success "üéâ D√©ploiement termin√© avec succ√®s !"
    log "üìã Logs sauvegard√©s dans: $DEPLOY_LOG"
}

# Ex√©cution du script
main "$@"
